<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-4.2.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-4.1.xsd ">

    <!-- 包下注解扫描 -->
    <context:component-scan base-package="zym.service"/>

    <!--基于注解的spring task 配置-->
    <task:annotation-driven/>

    <!-- 数据源 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="10"/>
        <!--最大空闲时间,指定的时间内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="180"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="100"/>
        <!-- 连接池中最小连接数，default: 3 -->
        <property name="minPoolSize" value="10"/>
    </bean>


    <!-- 配置和mybatis的整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件的位置  -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!-- mapper 文件放的位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>


    <!-- 配置扫描器 将mybatis接口的实现加入到ioc容器中    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的mapper的实现 加入到ioc容器中  -->
        <property name="basePackage" value="zym.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--事务控制  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <aop:config>
        <!-- 切入表达式   下面是所有的方法多少个参数都能切入事务-->
        <aop:pointcut expression="execution(* zym.service..*.*(..))" id="thePointCut"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="thePointCut"/>
    </aop:config>
    <!-- 配置事务增强如何切入 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <property name="usersByUsernameQuery" value="select account, password, enabled from users where account = ?"/>
        <property name="authoritiesByUsernameQuery"
                  value="select u.account, r.role_name from users u left join role r on u.role_id=r.id where u.account = ?"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="rememberMeServices"
          class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
        <constructor-arg index="0" value="zym"/>
        <constructor-arg index="1" ref="userDetailsService"/>
        <!--<beans:property name="alwaysRemember" value="true"/>-->
        <property name="parameter" value="rememberMe"/>
        <property name="tokenValiditySeconds" value="86400"/>
    </bean>

    <bean id="rememberMeFilter" class=
            "org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
        <constructor-arg index="0" ref="authenticationManager"/>
        <constructor-arg index="1" ref="rememberMeServices"/>
    </bean>

    <bean id="rememberMeAuthenticationProvider" class=
            "org.springframework.security.authentication.RememberMeAuthenticationProvider">
        <constructor-arg value="zym"/>
    </bean>

    <!-- spring-security 配置 -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 静态资源都可以访问 -->
        <security:intercept-url pattern="/**/*.jpg" access="permitAll"/>
        <security:intercept-url pattern="/**/*.png" access="permitAll"/>
        <security:intercept-url pattern="/**/*.ico" access="permitAll"/>
        <security:intercept-url pattern="/**/*.css" access="permitAll"/>
        <security:intercept-url pattern="/**/*.js" access="permitAll"/>
        <security:intercept-url pattern="/**/*.gif" access="permitAll"/>
        <security:intercept-url pattern="/js/**" access="permitAll"/>
        <security:intercept-url pattern="/css/**" access="permitAll"/>
        <security:intercept-url pattern="/fonts/**" access="permitAll"/>

        <security:intercept-url pattern="/index" access="permitAll"/>
        <security:intercept-url pattern="/user/login/test" access="permitAll"/>
        <security:intercept-url pattern="/user/**" access="hasAnyRole('ROLE_TEACHER','ROLE_STUDENT')"/>
        <security:intercept-url pattern="/itemBank/**" access="hasRole('ROLE_TEACHER')"/>
        <security:intercept-url pattern="/homework/teacher/**" access="hasRole('ROLE_TEACHER')"/>
        <security:intercept-url pattern="/homework/student/**" access="hasRole('ROLE_STUDENT')"/>
        <security:intercept-url pattern="/file/homework/upload" access="hasRole('ROLE_STUDENT')"/>
        <security:intercept-url pattern="/file/teacher/**" access="hasRole('ROLE_TEACHER')"/>
        <security:intercept-url pattern="/file/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/file/homework/download" access="hasAnyRole('ROLE_TEACHER','ROLE_STUDENT')"/>
        <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN','ROLE_TEACHER','ROLE_STUDENT')"/>

        <security:form-login login-page="/index" login-processing-url="/user/login"
                             default-target-url="/firstSee" always-use-default-target="true"/>

        <security:logout logout-url="/logout" logout-success-url="/index"/>
        <!-- XML 配置中默认csrf是关闭的，此处设置为打开
            如果这里打开csrf，则在form表单中需要添加
            <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
        -->
        <security:csrf/>
        <security:remember-me remember-me-parameter="remember-me"
                              token-validity-seconds="86400" user-service-ref="userDetailsService"/>
    </security:http>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider>
            <security:jdbc-user-service data-source-ref="dataSource"
                                        users-by-username-query="select account, password, enabled from users where account = ?"
                                        authorities-by-username-query="select u.account, r.role_name from users u left join role r on u.role_id=r.id where u.account = ?"/>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>