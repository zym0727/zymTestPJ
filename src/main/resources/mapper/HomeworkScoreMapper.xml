<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="zym.dao.HomeworkScoreMapper">
  <resultMap id="BaseResultMap" type="zym.pojo.HomeworkScore">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="student_id" jdbcType="INTEGER" property="studentId" />
    <result column="homework_id" jdbcType="INTEGER" property="homeworkId" />
    <result column="answer" jdbcType="VARCHAR" property="answer" />
    <result column="submit_time" jdbcType="TIMESTAMP" property="submitTime" />
    <result column="correct_rate" jdbcType="DOUBLE" property="correctRate" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="evaluate" jdbcType="VARCHAR" property="evaluate" />
    <result column="file_name" jdbcType="VARCHAR" property="fileName" />
    <result column="file_path" jdbcType="VARCHAR" property="filePath" />
  </resultMap>
  <sql id="Base_Column_List">
    id, student_id, homework_id, answer, submit_time, correct_rate, score, evaluate, 
    file_name, file_path
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from homework_score
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from homework_score
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="zym.pojo.HomeworkScore" useGeneratedKeys="true" keyProperty="id">
    insert into homework_score (student_id, homework_id,
      answer, submit_time, correct_rate, 
      score, evaluate, file_name, 
      file_path)
    values (#{studentId,jdbcType=INTEGER}, #{homeworkId,jdbcType=INTEGER},
      #{answer,jdbcType=VARCHAR}, #{submitTime,jdbcType=TIMESTAMP}, #{correctRate,jdbcType=DOUBLE},
      #{score,jdbcType=INTEGER}, #{evaluate,jdbcType=VARCHAR}, #{fileName,jdbcType=VARCHAR}, 
      #{filePath,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="zym.pojo.HomeworkScore" useGeneratedKeys="true" keyProperty="id">
    insert into homework_score
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentId != null">
        student_id,
      </if>
      <if test="homeworkId != null">
        homework_id,
      </if>
      <if test="answer != null">
        answer,
      </if>
      <if test="submitTime != null">
        submit_time,
      </if>
      <if test="correctRate != null">
        correct_rate,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="evaluate != null">
        evaluate,
      </if>
      <if test="fileName != null">
        file_name,
      </if>
      <if test="filePath != null">
        file_path,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="homeworkId != null">
        #{homeworkId,jdbcType=INTEGER},
      </if>
      <if test="answer != null">
        #{answer,jdbcType=VARCHAR},
      </if>
      <if test="submitTime != null">
        #{submitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="correctRate != null">
        #{correctRate,jdbcType=DOUBLE},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="evaluate != null">
        #{evaluate,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        #{filePath,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="zym.pojo.HomeworkScore">
    update homework_score
    <set>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="homeworkId != null">
        homework_id = #{homeworkId,jdbcType=INTEGER},
      </if>
      <if test="answer != null">
        answer = #{answer,jdbcType=VARCHAR},
      </if>
      <if test="submitTime != null">
        submit_time = #{submitTime,jdbcType=TIMESTAMP},
      </if>
      <if test="correctRate != null">
        correct_rate = #{correctRate,jdbcType=DOUBLE},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="evaluate != null">
        evaluate = #{evaluate,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null">
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        file_path = #{filePath,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="zym.pojo.HomeworkScore">
    update homework_score
    set student_id = #{studentId,jdbcType=INTEGER},
      homework_id = #{homeworkId,jdbcType=INTEGER},
      answer = #{answer,jdbcType=VARCHAR},
      submit_time = #{submitTime,jdbcType=TIMESTAMP},
      correct_rate = #{correctRate,jdbcType=DOUBLE},
      score = #{score,jdbcType=INTEGER},
      evaluate = #{evaluate,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      file_path = #{filePath,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--模糊查询sql-->
  <sql id="where">
    <where>
      <if test="id != null">
        and id = #{id,jdbcType=INTEGER}
      </if>
      <if test="studentId != null">
        and student_id = #{studentId,jdbcType=INTEGER}
      </if>
      <if test="homeworkId != null">
        and homework_id = #{homeworkId,jdbcType=INTEGER}
      </if>
      <if test="answer != null">
        and answer = #{answer,jdbcType=VARCHAR}
      </if>
      <if test="submitTime != null">
        and submit_time = #{submitTime,jdbcType=TIMESTAMP}
      </if>
      <if test="correctRate != null">
        and correct_rate = #{correctRate,jdbcType=DOUBLE}
      </if>
      <if test="score != null">
        and score = #{score,jdbcType=INTEGER}
      </if>
      <if test="evaluate != null">
        and evaluate = #{evaluate,jdbcType=VARCHAR}
      </if>
      <if test="fileName != null">
        and file_name = #{fileName,jdbcType=VARCHAR}
      </if>
      <if test="filePath != null">
        and file_path = #{filePath,jdbcType=VARCHAR}
      </if>
    </where>
  </sql>

  <!--模糊查询作业成绩表-->
  <select id="selectList" parameterType="zym.pojo.HomeworkScore" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from homework_score
    <include refid="where" />
  </select>

  <!--通过作业id来找已批改作业成绩列表-->
  <select id="selectListByHomeworkId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from homework_score
    where homework_id = #{homeworkId,jdbcType=INTEGER}
    and score is null
  </select>

  <!-- 批量删除 -->
  <delete id="batchDelete" parameterType="java.util.List">
    delete from homework_score
    where id IN
    <foreach collection="list" item="homeworkScore" open="(" separator="," close=")">
      ${homeworkScore.id}
    </foreach>
  </delete>

  <!--教师查询学生作业成绩信息-->
  <resultMap id="scoreResultMap" type="zym.pojo.param.HomeworkMessage">
    <!--这儿记录的是homeworkScore表的id-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="evaluate" jdbcType="VARCHAR" property="evaluate" />
    <result column="correct_rate" jdbcType="DOUBLE" property="correctRate" />
    <result column="user_name" jdbcType="VARCHAR" property="studentName" />
    <result column="course_name" jdbcType="VARCHAR" property="courseName" />
    <result column="class_name" jdbcType="VARCHAR" property="className" />
    <result column="question_ids" jdbcType="VARCHAR" property="questionIds" />
  </resultMap>

  <!--教师查询学生作业成绩信息sql-->
  <sql id="scoreListSql">
    hs.id, hs.score, hs.evaluate, hs.correct_rate, u.user_name,
     cr.course_name, mc.class_name, h.question_ids
  </sql>

  <!--教师查询学生作业成绩信息select-->
  <sql id="scoreList">
    select
    <include refid="scoreListSql" />
    from homework_score hs
    left join homework h on hs.homework_id = h.id
    left join course cr on h.course_id = cr.id
    left join users u on hs.student_id = u.id
    left join major_class mc on u.class_id = mc.id
    <where>
      cr.teacher_id = #{teacherId,jdbcType=INTEGER}
      <if test="courseId != null">
        and cr.id = #{courseId,jdbcType=INTEGER}
      </if>
      <if test=" == null">
        and cr.class_ids like
        concat('%',#{classId,jdbcType=INTEGER},'%')
      </if>
      <if test="homeworkId != null">
        and h.id = = #{homeworkId,jdbcType=INTEGER}
      </if>
    </where>
  </sql>

  <!--教师查询学生作业成绩信息list-->
  <select id="getHomeworkScoreList" parameterType="zym.pojo.param.HomeworkSeeScorePage"
          resultMap="scoreResultMap">
    <include refid="scoreList" />
    <if test="offset != null and pageSize != null">
      LIMIT #{offset},#{pageSize}
    </if>
  </select>

  <!--教师查询学生作业成绩信息list数量-->
  <select id="coutHomeworkScoreList" parameterType="zym.pojo.param.HomeworkSeeScorePage"
          resultType="int">
    select count(1) from (
    <include refid="scoreList" />
    ) as t
  </select>
</mapper>