<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="zym.dao.CourseMapper">
  <resultMap id="BaseResultMap" type="zym.pojo.Course">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="course_number" jdbcType="VARCHAR" property="courseNumber" />
    <result column="course_name" jdbcType="VARCHAR" property="courseName" />
    <result column="teacher_id" jdbcType="INTEGER" property="teacherId" />
    <result column="class_ids" jdbcType="VARCHAR" property="classIds" />
    <result column="class_time" jdbcType="VARCHAR" property="classTime" />
    <result column="semester" jdbcType="VARCHAR" property="semester" />
    <result column="credit" jdbcType="INTEGER" property="credit" />
  </resultMap>
  <sql id="Base_Column_List">
    id, course_number, course_name, teacher_id, class_ids, class_time, semester, credit
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from course
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from course
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="zym.pojo.Course" useGeneratedKeys="true" keyProperty="id">
    insert into course (course_number, course_name,
      teacher_id, class_ids, class_time, 
      semester, credit)
    values (#{courseNumber,jdbcType=VARCHAR}, #{courseName,jdbcType=VARCHAR},
      #{teacherId,jdbcType=INTEGER}, #{classIds,jdbcType=VARCHAR}, #{classTime,jdbcType=VARCHAR}, 
      #{semester,jdbcType=VARCHAR}, #{credit,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="zym.pojo.Course" useGeneratedKeys="true" keyProperty="id">
    insert into course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="courseNumber != null">
        course_number,
      </if>
      <if test="courseName != null">
        course_name,
      </if>
      <if test="teacherId != null">
        teacher_id,
      </if>
      <if test="classIds != null">
        class_ids,
      </if>
      <if test="classTime != null">
        class_time,
      </if>
      <if test="semester != null">
        semester,
      </if>
      <if test="credit != null">
        credit,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="courseNumber != null">
        #{courseNumber,jdbcType=VARCHAR},
      </if>
      <if test="courseName != null">
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="classIds != null">
        #{classIds,jdbcType=VARCHAR},
      </if>
      <if test="classTime != null">
        #{classTime,jdbcType=VARCHAR},
      </if>
      <if test="semester != null">
        #{semester,jdbcType=VARCHAR},
      </if>
      <if test="credit != null">
        #{credit,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="zym.pojo.Course">
    update course
    <set>
      <if test="courseNumber != null">
        course_number = #{courseNumber,jdbcType=VARCHAR},
      </if>
      <if test="courseName != null">
        course_name = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null">
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="classIds != null">
        class_ids = #{classIds,jdbcType=VARCHAR},
      </if>
      <if test="classTime != null">
        class_time = #{classTime,jdbcType=VARCHAR},
      </if>
      <if test="semester != null">
        semester = #{semester,jdbcType=VARCHAR},
      </if>
      <if test="credit != null">
        credit = #{credit,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="zym.pojo.Course">
    update course
    set course_number = #{courseNumber,jdbcType=VARCHAR},
      course_name = #{courseName,jdbcType=VARCHAR},
      teacher_id = #{teacherId,jdbcType=INTEGER},
      class_ids = #{classIds,jdbcType=VARCHAR},
      class_time = #{classTime,jdbcType=VARCHAR},
      semester = #{semester,jdbcType=VARCHAR},
      credit = #{credit,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--模糊查询课程条件-->
  <sql id="exampleWhere">
    <where>
      <if test="courseNumber != null">
        and course_number like concat('%',#{courseNumber,jdbcType=VARCHAR},'%')
      </if>
      <if test="courseName != null">
        and course_name like concat('%',#{courseName,jdbcType=VARCHAR},'%')
      </if>
      <if test="teacherId != null">
        and teacher_id = #{teacherId,jdbcType=INTEGER}
      </if>
      <if test="classIds != null">
        and class_ids = #{classIds,jdbcType=VARCHAR}
      </if>
      <if test="classTime != null">
        and class_time like concat('%',#{classTime,jdbcType=VARCHAR},'%')
      </if>
      <if test="semester != null">
        and semester like concat('%',#{semester,jdbcType=VARCHAR},'%')
      </if>
      <if test="credit != null">
        and credit = #{credit,jdbcType=INTEGER}
      </if>
    </where>
  </sql>

  <!--模糊查询课程列表-->
  <select id="selectCourseList" parameterType="zym.pojo.Course" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from course
    <include refid="exampleWhere" />
  </select>

  <!--根据学生id查询课程列表-->
  <select id="selectCourseListByStudentId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from course c1 where c1.class_ids like
    concat('%',(select u.class_id from users u where u.id = #{studentId,jdbcType=INTEGER}),'%')
  </select>
</mapper>