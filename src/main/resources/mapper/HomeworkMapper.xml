<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="zym.dao.HomeworkMapper">
  <resultMap id="BaseResultMap" type="zym.pojo.Homework">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
    <result column="assign_time" jdbcType="TIMESTAMP" property="assignTime" />
    <result column="deadline" jdbcType="TIMESTAMP" property="deadline" />
    <result column="question_ids" jdbcType="VARCHAR" property="questionIds" />
    <result column="is_automatic" jdbcType="INTEGER" property="isAutomatic" />
    <result column="is_assign" jdbcType="INTEGER" property="isAssign" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Base_Column_List">
    id, title, course_id, assign_time, deadline, question_ids, is_automatic, is_assign, remark
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from homework
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from homework
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="zym.pojo.Homework" useGeneratedKeys="true" keyProperty="id">
    insert into homework (title, course_id, assign_time,
      deadline, question_ids, is_automatic, 
      is_assign, remark)
    values (#{title,jdbcType=VARCHAR}, #{courseId,jdbcType=INTEGER},
      #{assignTime,jdbcType=TIMESTAMP}, #{deadline,jdbcType=TIMESTAMP},
      #{questionIds,jdbcType=VARCHAR}, #{isAutomatic,jdbcType=INTEGER},
      #{isAssign,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="zym.pojo.Homework" useGeneratedKeys="true" keyProperty="id">
    insert into homework
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="title != null">
        title,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="assignTime != null">
        assign_time,
      </if>
      <if test="deadline != null">
        deadline,
      </if>
      <if test="questionIds != null">
        question_ids,
      </if>
      <if test="isAutomatic != null">
        is_automatic,
      </if>
      <if test="isAssign != null">
        is_assign,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="assignTime != null">
        #{assignTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deadline != null">
        #{deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="questionIds != null">
        #{questionIds,jdbcType=VARCHAR},
      </if>
      <if test="isAutomatic != null">
        #{isAutomatic,jdbcType=INTEGER},
      </if>
      <if test="isAssign != null">
        #{isAssign,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="zym.pojo.Homework">
    update homework
    <set>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="assignTime != null">
        assign_time = #{assignTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deadline != null">
        deadline = #{deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="questionIds != null">
        question_ids = #{questionIds,jdbcType=VARCHAR},
      </if>
      <if test="isAutomatic != null">
        is_automatic = #{isAutomatic,jdbcType=INTEGER},
      </if>
      <if test="isAssign != null">
        is_assign = #{isAssign,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="zym.pojo.Homework">
    update homework
    set title = #{title,jdbcType=VARCHAR},
      course_id = #{courseId,jdbcType=INTEGER},
      assign_time = #{assignTime,jdbcType=TIMESTAMP},
      deadline = #{deadline,jdbcType=TIMESTAMP},
      question_ids = #{questionIds,jdbcType=VARCHAR},
      is_automatic = #{isAutomatic,jdbcType=INTEGER},
      is_assign = #{isAssign,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--学生查询作业信息-->
  <resultMap id="studentResultMap" type="zym.pojo.param.HomeworkMessage" extends="BaseResultMap">
    <result column="course_name" jdbcType="VARCHAR" property="courseName" />
    <result column="class_time" jdbcType="VARCHAR" property="classTime" />
    <result column="user_name" jdbcType="VARCHAR" property="teacherName" />
    <result column="class_ids" jdbcType="VARCHAR" property="classIds" />
  </resultMap>

  <!--学生查询未提交作业sql字段-->
  <sql id="studentHomework">
    h.id,h.title,h.assign_time,h.deadline,h.question_ids,h.remark,
    c1.course_name,c1.class_time,u.user_name
  </sql>

  <!--学生查询未提交作业sql-->
  <sql id="unSubmitList">
    select
    <include refid="studentHomework"/>
    from homework h left join
    (select s.homework_id,s.submit_time from homework_score s
    where s.student_id = #{id,jdbcType=INTEGER}) as hs
    on h.id = hs.homework_id
    left join course c1 on c1.id = h.course_id
    left join users u on u.id = c1.teacher_id
    left join users u1 on u1.id = #{id,jdbcType=INTEGER}
    where h.is_assign = '1' and hs.submit_time is null
    and h.course_id  in
    (select co.id from course co where co.class_ids like CONCAT('%,',u1.class_id,',%')
     or co.class_ids like CONCAT('%,',u1.class_id) or co.class_ids like CONCAT(u1.class_id,',%') )
    <if test="courseId != null">
      and h.course_id = #{courseId,jdbcType=INTEGER}
    </if>
    order by h.assign_time desc
  </sql>

  <!--学生查询未提交作业-->
  <select id="getUnSubmitListByStudentId" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultMap="studentResultMap">
    <include refid="unSubmitList"/>
    <if test="offset != null and pageSize != null">
      LIMIT #{offset},#{pageSize}
    </if>
  </select>

  <!--学生查询未提交作业数量-->
  <select id="countUnSubmitListStudent" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultType="int">
    select count(1) from (
    <include refid="unSubmitList"/>
    ) as counts
  </select>

  <!--学生查询提交作业sql字段-->
  <sql id="studentSubHomework">
    h.id,h.title,h.assign_time,h.deadline,h.question_ids,h.remark,hs.score,hs.evaluate,
    c1.course_name,c1.class_time,u.user_name
  </sql>

  <!--学生查询提交作业sql-->
  <sql id="submitList">
    select
    <include refid="studentSubHomework"/>
    from homework h left join
    homework_score hs
    on h.id = hs.homework_id
    left join course c1 on c1.id = h.course_id
    left join users u on u.id = c1.teacher_id
    where h.is_assign = '1' and hs.student_id = #{id,jdbcType=INTEGER} and hs.submit_time is not null
    <if test="courseId != null">
      and h.course_id = #{courseId,jdbcType=INTEGER}
    </if>
  </sql>

  <!--学生查询提交作业-->
  <select id="getSubmitListByStudentId" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultMap="studentResultMap">
    <include refid="submitList"/>
    order by h.assign_time desc
    <if test="offset != null and pageSize != null">
      LIMIT #{offset},#{pageSize}
    </if>
  </select>

  <!--学生查询提交作业数量-->
  <select id="countSubmitListStudent" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultType="int">
    select count(1) from (
    <include refid="submitList"/>
    order by h.assign_time desc
    ) as counts
  </select>

  <!--学生查询是否批改作业sql-->
  <sql id="MarkList">
    <include refid="submitList"/>
    <if test="score == null">
      and hs.score is null
    </if>
    <if test="score != null">
      and hs.score is not null
    </if>
    order by h.assign_time desc
  </sql>

  <!--学生查询是否批改作业-->
  <select id="getMarkListByStudentId" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultMap="studentResultMap">
    <include refid="MarkList"/>
    <if test="offset != null and pageSize != null">
      LIMIT #{offset},#{pageSize}
    </if>
  </select>

  <!--学生查询是否批改作业数量-->
  <select id="countMarkListStudent" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultType="int">
    select count(1) from (
    <include refid="MarkList"/>
    ) as counts
  </select>

  <!--模糊查询作业-->
  <sql id="where">
    <where>
      <if test="title != null">
        and title = #{title,jdbcType=VARCHAR}
      </if>
      <if test="courseId != null">
        and course_id = #{courseId,jdbcType=INTEGER}
      </if>
      <if test="assignTime != null">
        and assign_time = #{assignTime,jdbcType=TIMESTAMP}
      </if>
      <if test="deadline != null">
        and deadline = #{deadline,jdbcType=TIMESTAMP}
      </if>
      <if test="questionIds != null">
        and question_ids = #{questionIds,jdbcType=VARCHAR}
      </if>
      <if test="isAutomatic != null">
        and is_automatic = #{isAutomatic,jdbcType=INTEGER}
      </if>
      <if test="isAssign != null">
        and is_assign = #{isAssign,jdbcType=INTEGER}
      </if>
      <if test="remark != null">
        and remark = #{remark,jdbcType=VARCHAR}
      </if>
    </where>
  </sql>

  <!--模糊查询作业-->
  <select id="getHomeworkList" parameterType="zym.pojo.Homework" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from homework
    <include refid="where" />
  </select>

  <!--通过是否发布查询作业-->
  <select id="getHomeworkListByIsAssign" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from homework
    where is_assign = #{isAssign,jdbcType=INTEGER}
  </select>

  <!--通过是否自动批改查询作业-->
  <select id="getHomeworkListByIsAutomatic" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from homework
    where is_automatic = #{isAutomatic,jdbcType=INTEGER}
  </select>

  <!--教师查询详细作业信息列表sql字段-->
  <sql id="HomeworkMessageList">
    h.id, h.title, h.assign_time, h.deadline, h.question_ids,
     h.is_automatic, h.is_assign, h.remark, c1.course_name, c1.class_ids
  </sql>

  <!--教师查询详细作业信息列表sql-->
  <sql id="getTeacherSee">
    select
    <include refid="HomeworkMessageList" />
    from homework h left join course c1 on h.course_id = c1.id
    <where>
      <if test="teacherId != null">
        and c1.teacher_id = #{teacherId,jdbcType=INTEGER}
      </if>
      <if test="courseId != null">
        and c1.id = #{courseId,jdbcType=INTEGER}
      </if>
      <if test="id != null">
        and h.id = #{id,jdbcType=INTEGER}
      </if>
    </where>
    order by h.assign_time desc
  </sql>

  <!--教师查询详细作业信息列表-->
  <select id="getHomeworkMessageList" parameterType="zym.pojo.param.HomeworkManagePage"
          resultMap="studentResultMap">
    <include refid="getTeacherSee" />
    <if test="offset != null and pageSize != null">
      LIMIT #{offset},#{pageSize}
    </if>
  </select>

  <!--教师查询详细作业信息列表总数量-->
  <select id="countHomeworkMessageList" parameterType="zym.pojo.param.HomeworkManagePage" resultType="int">
    select count(1) from (
    <include refid="getTeacherSee" />
    ) as t
  </select>

  <!--教师查询学生作业信息-->
  <resultMap id="teacherResultMap" type="zym.pojo.param.HomeworkMessage" extends="BaseResultMap">
    <!--这儿记录的是homeworkScore表的id-->
    <!--<id column="id" jdbcType="INTEGER" property="id" />-->
    <!--<result column="question_ids" jdbcType="VARCHAR" property="questionIds" />-->
    <result column="course_name" jdbcType="VARCHAR" property="courseName" />
    <result column="class_time" jdbcType="VARCHAR" property="classTime" />
    <result column="user_name" jdbcType="VARCHAR" property="studentName" />
  </resultMap>

  <!--教师查询学生作业信息sql-->
  <sql id="homeworkScoreListSql">
    hs.id, c1.course_name, c1.class_time, h.question_ids, h.title, u2.user_name
  </sql>

  <!--教师查询学生作业信息select-->
  <sql id="homeworkScoreList">
    select
    <include refid="homeworkScoreListSql" />
    from homework_score hs
    left join homework h on h.id = hs.homework_id
    left join course c1 on h.course_id = c1.id
    left join users u1 on c1.teacher_id = u1.id
    left join users u2 on hs.student_id = u2.id
    <where>
      u1.id = #{id,jdbcType=INTEGER}
      <if test="isAutomatic != null">
        and h.is_automatic = #{isAutomatic,jdbcType=INTEGER}
      </if>
      <if test="score == null">
        and hs.score is null
      </if>
      <if test="score != null">
        and hs.score is not null
      </if>
      <if test="courseId != null">
        and h.course_id = #{courseId,jdbcType=INTEGER}
      </if>
    </where>
    order by hs.submit_time desc
  </sql>

  <!--教师查询学生作业信息list-->
  <select id="getSubmitHomeworkListByTeacherId" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultMap="teacherResultMap">
    <include refid="homeworkScoreList" />
    <if test="offset != null and pageSize != null">
      LIMIT #{offset},#{pageSize}
    </if>
  </select>

  <!--教师查询学生作业信息list数量-->
  <select id="countSubmitHomeworkListTeacher" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultType="int">
      select count(1) from (
        <include refid="homeworkScoreList" />
      ) as t
  </select>

  <!--教师查询所有此教师布置的作业sql-->
  <sql id="homeworkTeacher">
    h.id, h.title, h.course_id, h.assign_time, h.deadline,
    h.question_ids, h.is_automatic, h.is_assign, h.remark, cr.course_name
  </sql>

  <!--教师查询所有此教师布置的作业-->
  <select id="getHomeworkListByTeacherId" parameterType="java.lang.Integer" resultMap="teacherResultMap">
    select
    <include refid="homeworkTeacher" />
    from homework h left join
    course cr on h.course_id = cr.id
    where cr.teacher_id = #{teacherId,jdbcType=INTEGER}
    order by h.assign_time desc
  </select>

  <!--学生在留言时查看作业-->
  <select id="getHomeworkListByStudentId" parameterType="zym.pojo.param.StudentHomeworkPage"
          resultMap="teacherResultMap">
    select
    <include refid="studentHomework" />
    from homework h
    left join course c1 on c1.id = h.course_id
    left join users u on u.id = #{id,jdbcType=INTEGER}
    where h.is_assign = '1' and h.course_id  in
    (select co.id from course co where co.class_ids like CONCAT('%',u.class_id,'%'))
    <if test="courseId != null">
      and h.course_id = #{courseId,jdbcType=INTEGER}
    </if>
    order by h.assign_time desc
  </select>
</mapper>